<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Kotlin协程</title>
    <link href="/2022/09/21/Kotlin%E5%8D%8F%E7%A8%8B/"/>
    <url>/2022/09/21/Kotlin%E5%8D%8F%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Kotlin协程"><a href="#Kotlin协程" class="headerlink" title="Kotlin协程"></a>Kotlin协程</h1><h2 id="一、Kotlin协程简介"><a href="#一、Kotlin协程简介" class="headerlink" title="一、Kotlin协程简介"></a>一、Kotlin协程简介</h2><h3 id="1-什么是协程？"><a href="#1-什么是协程？" class="headerlink" title="1. 什么是协程？"></a>1. 什么是协程？</h3><blockquote><p><strong>2022.08.28 起 -&gt; 预计于 2022.09.04 结束</strong></p><p>协程是什么，这个问题在我刚开始学习<code>Kotlin</code>的时候其实很迷茫，最初的理解就是可以实现异步的一段程序，在安卓中可以结合<code>Retrofit</code>用来网络请求。但很显然，这是非常肤浅的。所以，此篇文章用来深入理解一下<strong>Kotlin</strong>中的协程部分。</p></blockquote><p>其实简单来说，协程最核心的就是函数或者一段程序能够被挂起，稍后可以在挂起的位置恢复。根据维基百科的说法：</p><blockquote><p><strong>协程</strong>（英语：coroutine）是计算机程序的一类组件，推广了<a href="https://zh.m.wikipedia.org/wiki/%E5%8D%8F%E4%BD%9C%E5%BC%8F%E5%A4%9A%E4%BB%BB%E5%8A%A1">协作式多任务</a>的<a href="https://zh.m.wikipedia.org/wiki/%E5%AD%90%E4%BE%8B%E7%A8%8B">子例程</a>，允许执行被挂起与被恢复。相对子例程而言，协程更为一般和灵活，但在实践中使用没有子例程那样广泛。协程更适合于用来实现彼此熟悉的程序组件，如<a href="https://zh.m.wikipedia.org/wiki/%E5%8D%8F%E4%BD%9C%E5%BC%8F%E5%A4%9A%E4%BB%BB%E5%8A%A1">协作式多任务</a>、<a href="https://zh.m.wikipedia.org/wiki/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">异常处理</a>、<a href="https://zh.m.wikipedia.org/wiki/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF">事件循环</a>、<a href="https://zh.m.wikipedia.org/wiki/%E8%BF%AD%E4%BB%A3%E5%99%A8">迭代器</a>、<a href="https://zh.m.wikipedia.org/wiki/%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC">无限列表</a>和<a href="https://zh.m.wikipedia.org/wiki/%E7%AE%A1%E9%81%93_(%E8%BD%AF%E4%BB%B6)">管道</a>。</p></blockquote><p>协程的挂起和恢复是程序逻辑自己控制的，协程是通过主动挂起出让运行权来实现协作的，所以从本质上来讲讨论协程就是在讨论程序的控制流程。探讨协程最核心的点就是对<strong>挂起</strong>和<strong>恢复</strong>的研究。</p><h3 id="2-相比于线程"><a href="#2-相比于线程" class="headerlink" title="2. 相比于线程"></a>2. 相比于线程</h3><p>协程有些类似于线程，但线程是<strong>抢占式多任务</strong>的，而协程是<strong>协作式多任务</strong>的。这两者有什么区别呢？线程一旦开始执行就不能暂停，直到该任务结束，这个过程都是连续的，不存在协作问题。而协程可以实现任务执行流程的协作调度。而且线程的调度需要借助操作系统，由操作系统进行控制，协程则不需要。同线程相比，协程也更加轻量，不太占用系统资源。</p><h3 id="3-协程的分类"><a href="#3-协程的分类" class="headerlink" title="3. 协程的分类"></a>3. 协程的分类</h3><h4 id="（1）根据是否有调用栈来分类"><a href="#（1）根据是否有调用栈来分类" class="headerlink" title="（1）根据是否有调用栈来分类"></a>（1）根据是否有调用栈来分类</h4><ul><li>有栈协程（Stackful Coroutine）：每一个协程都有自己的调用栈，有点类似于线程的调用栈，这种情况下的协程实现很大程度上接近线程，主要的不同体现在调度上。</li><li>无栈线程（Stackless Coroutine）：协程没有自己的调用栈，挂起点的状态通过状态机或者闭包等语法实现。</li></ul><p>有栈协程的有点是可以在任意函数调用层级的任意位置挂起，并转移调度权，但有栈协程总是会给协程开辟一块栈内存，因此内存开销也大大增加，而无栈协程在内存方面就比较有优势。</p><p>那<code>Kotlin</code>的协程是否有栈呢？如果我们狭义地认为调用栈就只是类似于线程为函数提供的调用栈的话，Kotlin既然无法在任意层次普通函数调用内实现挂起，那么可以将<strong>Kotlin协程</strong>认为是<strong>无栈协程</strong>。（Kotlin的挂起函数，即suspend关键字声明的函数，只能在协程体内或者其他挂起函数内调用，而不能在普通函数内调用，但挂起函数可以随意调用普通函数）。但如果从挂起函数可以实现任意层次嵌套调用内挂起的效果来讲，也可以将<strong>Kotlin协程</strong>视为一种<strong>有栈协程</strong>的实现。但我们大可不必纠结于Kotlin协程是属于哪一类。</p><h4 id="（2）根据调度方式分类"><a href="#（2）根据调度方式分类" class="headerlink" title="（2）根据调度方式分类"></a>（2）根据调度方式分类</h4><ul><li>对称协程（Symmetric Coroutine）：任何一个协程都是相互独立并且平等的，调度权可以在任意协程之间转移。</li><li>非对称协程（Asymmetric Coroutine）：协程出让调度权的目标只能是它的调用者，即协程之间存在调用和被调用关系。</li></ul><p>对称协程实际上非常接近线程了，而非对称协程的调用则更接近我们的思维方式，常见语言对协程的实现也基本上都是非对称协程。例如<strong>async&#x2F;await</strong>，await 时将调度权转移到异步调用中，异步调用返回的结果或抛出异常时总是将调度权转移回 await 的位置。这就是典型的调用于非调用关系。非对称协程在实现上也更加自然，相对容易，而且只要对非对称协程稍作修改就可实现对称协程的能力。</p><p>Kotlin 的挂起函数就是非对称协程的例子，调用者与非调用者的关系是固定的，被调用者运行完毕后只能返回到调用者，而不能返回到其他协程。当然，Kotlin 也有自己的对称协程的实现。还是用几张图来理解一下吧：</p><p>这是对称协程，每个协程调用之后，都将调度权返回给调度器，各协程间是平等的关系。</p><p><img src="https://pic1.zhimg.com/v2-1b5386fdeae8480977e7f9670c819ea0_r.jpg" alt="对称协程"></p><p>这就是非对称协程，只存在调用者和被调用者的关系。</p><p><img src="https://pic3.zhimg.com/80/v2-170ad18468256f3c05afb93895036fae_1440w.jpg" alt="非对称协程"></p><p>当然，不管 Kotlin 到底是属于哪一种协程，我们最终都以讨论其函数的挂起和恢复为主。 </p><h2 id="二、Kotlin协程基础"><a href="#二、Kotlin协程基础" class="headerlink" title="二、Kotlin协程基础"></a>二、Kotlin协程基础</h2><h3 id="1-协程的构造"><a href="#1-协程的构造" class="headerlink" title="1. 协程的构造"></a>1. 协程的构造</h3><h3 id="（1）协程的创建与启动"><a href="#（1）协程的创建与启动" class="headerlink" title="（1）协程的创建与启动"></a>（1）协程的创建与启动</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">val</span> continuation = <span class="hljs-keyword">suspend</span> &#123;<br>    println(<span class="hljs-string">&quot;In Coroutine.&quot;</span>)<br>        <span class="hljs-number">5</span><br>    &#125;.createCoroutine(<span class="hljs-keyword">object</span> : Continuation&lt;<span class="hljs-built_in">Int</span>&gt; &#123;<br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">resumeWith</span><span class="hljs-params">(result: <span class="hljs-type">Result</span>&lt;<span class="hljs-type">Int</span>&gt;)</span></span> &#123;<br>            println(<span class="hljs-string">&quot;Coroutine End: <span class="hljs-variable">$result</span>&quot;</span>)<br>        &#125;<br><br>        <span class="hljs-keyword">override</span> <span class="hljs-keyword">val</span> context = EmptyCoroutineContext<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>我们通过<code>createCoroutine()</code>来创建了一个协程，点进去看看它的源码是咋写的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> <span class="hljs-params">(<span class="hljs-keyword">suspend</span> ()</span></span> -&gt; T).createCoroutine(<br>    completion: Continuation&lt;T&gt;<br>): Continuation&lt;<span class="hljs-built_in">Unit</span>&gt; =<br>    SafeContinuation(createCoroutineUnintercepted(completion).intercepted(), COROUTINE_SUSPENDED)<br></code></pre></td></tr></table></figure><ul><li>Receiver 是一个被 suspend 修饰的挂起函数，也是协程的执行体，称他为<strong>协程体</strong>。</li><li>参数 completion 会在协程执行完成后调用，实际上就是协程的完成回调。</li><li>返回值是一个 Continuation 对象，之后会通过这个值启动该协程。</li></ul><p>创建之后，我们在代码中通过调用<code>startCoroutine()</code>函数来启动协程</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> continuation1 = <span class="hljs-keyword">suspend</span> &#123;<br>    println(<span class="hljs-string">&quot;In Coroutine.&quot;</span>)<br>    <span class="hljs-number">5</span><br>&#125;.startCoroutine(<span class="hljs-keyword">object</span> : Continuation&lt;<span class="hljs-built_in">Int</span>&gt; &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">val</span> context: CoroutineContext<br>        <span class="hljs-keyword">get</span>() = EmptyCoroutineContext<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">resumeWith</span><span class="hljs-params">(result: <span class="hljs-type">Result</span>&lt;<span class="hljs-type">Int</span>&gt;)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;Coroutine End: <span class="hljs-variable">$result</span>&quot;</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>和创建的过程大差不差，源码也差不多，我们也来分析一下。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> <span class="hljs-params">(<span class="hljs-keyword">suspend</span> ()</span></span> -&gt; T).startCoroutine(<br>    completion: Continuation&lt;T&gt;<br>) &#123;<br>    createCoroutineUnintercepted(completion).intercepted().resume(<span class="hljs-built_in">Unit</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，最后通过 **resume() **函数来启动这个协程。但是为什么通过这个函数就能启动协程呢？由于我们的刨根问底的精神，我们继续深入研究。我们通过 <strong>println(continuation)</strong> 来看看打印出什么。</p><p><img src="https://img-blog.csdnimg.cn/3390acb176d942a482cd59ce24fbcd37.png" alt="结果"></p><p>第一行就是打印出的东西，这是个啥？</p><p>熟悉 java 字节码的同学可能知道，这是指这是一个匿名内部类，但这个匿名内部类哪来的呢？我也不知道，当然是学来的~</p><p>书中描述是编译器根据我们的协程体，就是那个lambda表达式生成的。这个类继承自<strong>SuspendLambda</strong>类，而这个类又是<strong>Continuation</strong>接口的实现类。通过打印出的东西，我们还可以看到另一个东西，<strong>invokeSuspend</strong>， 这个就可以解释这个Suspend Lambda是如何编译的了，这个函数的实现就是协程体。正是因为调用了协程体的 <strong>resume()</strong> 函数才让协程得以执行。</p><p>除此之外，在源码中，还有一组创建和启动的API。这一组API可以为协程体提供一个作用域，在这个作用域内可以直接使用作用域内定义的函数或者状态。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;R, T&gt;</span> <span class="hljs-params">(<span class="hljs-keyword">suspend</span> R.()</span></span> -&gt; T).createCoroutine(<br>    receiver: R,<br>    completion: Continuation&lt;T&gt;<br>): Continuation&lt;<span class="hljs-built_in">Unit</span>&gt; =<br>    SafeContinuation(createCoroutineUnintercepted(receiver, completion).intercepted(), COROUTINE_SUSPENDED)<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;R, T&gt;</span> <span class="hljs-params">(<span class="hljs-keyword">suspend</span> R.()</span></span> -&gt; T).startCoroutine(<br>    receiver: R,<br>    completion: Continuation&lt;T&gt;<br>) &#123;<br>    createCoroutineUnintercepted(receiver, completion).intercepted().resume(<span class="hljs-built_in">Unit</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>通过对比可以发现，这一组仅仅只多了一个 Receiver 的类型R，这个就是为协程提供作用域的。我们首先来封装一个启动协程的函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;R, T&gt;</span> <span class="hljs-title">launchCoroutine</span><span class="hljs-params">(receiver: <span class="hljs-type">R</span>, block: <span class="hljs-type">suspend</span> <span class="hljs-type">R</span>.() -&gt; <span class="hljs-type">T</span>)</span></span> &#123;<br>    block.startCoroutine(receiver, <span class="hljs-keyword">object</span> : Continuation&lt;T&gt; &#123;<br>        <span class="hljs-keyword">override</span> <span class="hljs-keyword">val</span> context: CoroutineContext<br>            <span class="hljs-keyword">get</span>() = EmptyCoroutineContext<br><br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">resumeWith</span><span class="hljs-params">(result: <span class="hljs-type">Result</span>&lt;<span class="hljs-type">T</span>&gt;)</span></span> &#123;<br>            println(<span class="hljs-string">&quot;Coroutine End: <span class="hljs-variable">$result</span>&quot;</span>)<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>然后自定义一个协程作用域。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 定义一个协程作用域</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerScope</span>&lt;<span class="hljs-type">T</span>&gt; &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">produce</span><span class="hljs-params">(value: <span class="hljs-type">T</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;produce <span class="hljs-variable">$value</span>&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后调用这个函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">callLaunchCoroutine</span><span class="hljs-params">()</span></span>&#123;<br>    launchCoroutine(ProducerScope&lt;<span class="hljs-built_in">Int</span>&gt;()) &#123;<br>        println(<span class="hljs-string">&quot;In Coroutine.&quot;</span>)<br>        <span class="hljs-comment">// 可以直接使用作用域内的函数 produce()</span><br>        produce(<span class="hljs-number">1024</span>)<br>        delay(<span class="hljs-number">1000</span>)<br>        produce(<span class="hljs-number">2048</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，我们在 <strong>launchCoroutine()</strong> 中调用了 <strong>ProducerScope</strong> 中的函数，结果如下：</p><p><img src="https://img-blog.csdnimg.cn/60027ccab39a4202bf00bb11d3e040bb.png" alt="作用域结果"></p><p>作用域可以用来提供函数支持，当然也可以增加限制。这个时候我们就要用到一个注解 <strong>RestrictsSuspension</strong> ，当作用域在这个注解作用下，在其内部就无法调用外部的挂起函数，就比如 delay()。</p><p><img src="https://img-blog.csdnimg.cn/f7a52253da67494da2452f021544d2e2.png" alt="baocuo"></p><p>可以看到，编译器报错了，这个注解在某些特定的场景下可以避免无效甚至危险的挂起函数的调用。当然我还没遇到这样的场景（汗.)</p><h3 id="（2）协程的挂起"><a href="#（2）协程的挂起" class="headerlink" title="（2）协程的挂起"></a>（2）协程的挂起</h3><p>我们已经知道在 Kotlin 中使用 <strong>suspend</strong> 关键字修饰的函数叫做挂起函数，而挂起函数只能在其他挂起函数或者协程体内调用。接下里我们来看两段挂起函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 挂起函数可以像普通函数一样返回</span><br><span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">suspendFunc01</span><span class="hljs-params">(a: <span class="hljs-type">Int</span>)</span></span>&#123;<br>    <span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 挂起函数也可以处理异步逻辑</span><br><span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">suspendFunc02</span><span class="hljs-params">(a: <span class="hljs-type">String</span>, b: <span class="hljs-type">String</span>)</span></span><br>        = suspendCoroutine &#123; continuation -&gt;<br>    thread &#123;<br>        continuation.resumeWith(Result.success(<span class="hljs-number">5</span>))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这两个都是被 suspend 修饰的挂起函数，但是他们真的都会处于挂起状态吗？答案是否。挂起函数不一定会真的挂起，只有当这个挂起函数处理异步调用时，这个协程才会被挂起。通过编译器我们也可以发现这两个函数哪一个被挂起，哪一个没被挂起。</p><p><img src="https://img-blog.csdnimg.cn/0da302ec5a53401aa0b0d76bd6846e80.png" alt=" 是否挂起"></p><p>很明显，suspendFunc01() 没有被挂起。因为它没有出现异步调用，只相当于一个普通函数。</p><p>通过前面的介绍我们知道，suspendCoroutine() 函数可以返回一个 Continuation 实例，这部分也就是协程体。在协程的内部挂起函数的调用处被称为挂起点，挂起点如果出现了异步调用，那么当前的协程就会被挂起，直到对应的 Continuation 的 resume 函数被调用才会恢复执行。而 <strong>suspendFunc02()</strong> 挂起点处就有异步调用，所以它是被挂起的。</p><p>所以为什么普通函数不能调用挂起函数呢？原因就是普通函数中没有 Continuation 实例，而挂起函数要被挂起 <strong>Continuation 实例是必需的</strong>，编译器能够对这个实例进行正确传递。</p><h3 id="（3）协程的上下文"><a href="#（3）协程的上下文" class="headerlink" title="（3）协程的上下文"></a>（3）协程的上下文</h3><p>在前面讲到协程的创建与启动时，可以看到，除了 resumeWith() 函数，还有一个 context，也就是上下文。熟悉安卓开发的肯定对这个都不陌生，它承载了<strong>资源获取、配置管理</strong>等重要工作，在很多控件中，这个 context 都必不可少，那它在协程中有什么用呢？协程的上下文也是大同小异，它的数据结构特征更加的显著，比较类似于List，Map等经典数据结构。先来看看它的主要源码叭~</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Key</span>&lt;<span class="hljs-type">E : Element</span>&gt;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Element</span> : <span class="hljs-type">CoroutineContext</span> &#123;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * A key of this coroutine context element.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">val</span> key: Key&lt;*&gt;<br>    <br>    <span class="hljs-comment">// 通过该方法根据 key 返回一个Element(一个CoroutineContext类型的元素)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">operator</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;E : Element&gt;</span> <span class="hljs-title">get</span><span class="hljs-params">(key: <span class="hljs-type">Key</span>&lt;<span class="hljs-type">E</span>&gt;)</span></span>: E? =<br>        <span class="hljs-meta">@Suppress(<span class="hljs-string">&quot;UNCHECKED_CAST&quot;</span>)</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.key == key) <span class="hljs-keyword">this</span> <span class="hljs-keyword">as</span> E <span class="hljs-keyword">else</span> <span class="hljs-literal">null</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;R&gt;</span> <span class="hljs-title">fold</span><span class="hljs-params">(initial: <span class="hljs-type">R</span>, operation: (<span class="hljs-type">R</span>, <span class="hljs-type">Element</span>) -&gt; <span class="hljs-type">R</span>)</span></span>: R =<br>        operation(initial, <span class="hljs-keyword">this</span>)<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">minusKey</span><span class="hljs-params">(key: <span class="hljs-type">Key</span>&lt;*&gt;)</span></span>: CoroutineContext =<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.key == key) EmptyCoroutineContext <span class="hljs-keyword">else</span> <span class="hljs-keyword">this</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Element 接口中有一个属性 <strong>key</strong>，这个 key 就是协程上下文这个集合中元素的索引，有点像 List 的索引 index ，但不同的是这个 key “长”在了数据的里面，这就意味着协程上下文一创建就找到了自己的位置。下面我们就来为协程上下文添加一些简单元素。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CoroutineName</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> name: String): AbstractCoroutineContextElement(Key)&#123;<br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> Key: CoroutineContext.Key&lt;CoroutineName&gt;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">toString</span><span class="hljs-params">()</span></span> = name<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CoroutineExceptionHandler</span>(<span class="hljs-keyword">val</span> onErrorAction: (Throwable) -&gt; <span class="hljs-built_in">Unit</span>)<br>    : AbstractCoroutineContextElement(Key)&#123;<br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> Key: CoroutineContext.Key&lt;CoroutineExceptionHandler&gt;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onError</span><span class="hljs-params">(error: <span class="hljs-type">Throwable</span>)</span></span>&#123;<br>        error.printStackTrace()<br>        onErrorAction(error)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这两个就是要添加到上下文中的类，都继承自抽象类 **AbstractCoroutineContextElement()**，而这个类是 Element 类型的。究其根本还是一个 ContinuationContext 对象。第一个类是为协程实现一个名字，第二个类是协程异常处理器的实现。他们是如何添加到上下文中的呢？莫急，且看：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> coroutineContext: CoroutineContext = EmptyCoroutineContext<br>    coroutineContext += CoroutineName(<span class="hljs-string">&quot;test1&quot;</span>)<br>    coroutineContext += CoroutineExceptionHandler &#123;<br>        println(it)<br>    &#125;<br><br><span class="hljs-comment">//    第二种写法</span><br><span class="hljs-comment">//    coroutineContext += CoroutineName(&quot;test1&quot;) + CoroutineExceptionHandler &#123;</span><br><span class="hljs-comment">//        println(it)</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-keyword">suspend</span> &#123;<br>        println(<span class="hljs-string">&quot;In Coroutine [<span class="hljs-subst">$&#123;coroutineContext[CoroutineName]&#125;</span>].&quot;</span>)<br>        <span class="hljs-comment">// throw ArithmeticException()</span><br>        <span class="hljs-number">100</span><br>    &#125;.startCoroutine(<span class="hljs-keyword">object</span> : Continuation&lt;<span class="hljs-built_in">Int</span>&gt; &#123;<br><br>        <span class="hljs-comment">// 将定义好的 continuationContext 赋值给 context</span><br>        <span class="hljs-keyword">override</span> <span class="hljs-keyword">val</span> context = coroutineContext<br><br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">resumeWith</span><span class="hljs-params">(result: <span class="hljs-type">Result</span>&lt;<span class="hljs-type">Int</span>&gt;)</span></span> &#123;<br>            result.onFailure &#123;<br>                context[CoroutineExceptionHandler]?.onError(it)<br>            &#125;.onSuccess &#123;<br>                println(<span class="hljs-string">&quot;Result <span class="hljs-variable">$it</span>&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>是不是很像集合元素的添加？没错，就是这么简单。这样我们就知道协程上下文的设置和获取的方法了。当然，上下文不止有这么点作用，通过我对官方文档的调查，协程上下文还包含一个 <em>协程调度器</em> （参见 <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/index.html">CoroutineDispatcher</a>）它确定了相关的协程在哪个线程或哪些线程上执行。协程调度器可以将协程限制在一个特定的线程执行，或将它分派到一个线程池，亦或是让它不受限地运行。</p><p>所有的协程构建器诸如 <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html">launch</a> 和 <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html">async</a> 接收一个可选的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/-coroutine-context/">CoroutineContext</a> 参数，它可以被用来显式的为一个新协程或其它上下文元素指定一个调度器。这些只作为了解，深入研究还待学习。</p><h3 id="（4）协程的拦截器"><a href="#（4）协程的拦截器" class="headerlink" title="（4）协程的拦截器"></a>（4）协程的拦截器</h3><p>在协程上下文的基础上，标准库中还提供了另一个组件，就是拦截器，它允许我们拦截协程异步回调时的恢复调用，简单来说就是在异步回调的过程中为这个回调添加一些东西，比如添加个日志，甚至还可以在这个过程中控制线程的切换。</p><p>拦截器其实也是上下文的一种实现，我们定义好一个拦截器之后赋值给 context 就行。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LogInterceptor</span> : <span class="hljs-type">ContinuationInterceptor</span> &#123;<br>    <span class="hljs-comment">// 为 key 赋值</span><br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">val</span> key = ContinuationInterceptor<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> <span class="hljs-title">interceptContinuation</span><span class="hljs-params">(continuation: <span class="hljs-type">Continuation</span>&lt;<span class="hljs-type">T</span>&gt;)</span></span><br>            = LogContinuation(continuation)<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LogContinuation</span>&lt;<span class="hljs-type">T</span>&gt;(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> continuation: Continuation&lt;T&gt;)<br>    : Continuation&lt;T&gt; <span class="hljs-keyword">by</span> continuation &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">resumeWith</span><span class="hljs-params">(result: <span class="hljs-type">Result</span>&lt;<span class="hljs-type">T</span>&gt;)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;before resumeWith: <span class="hljs-variable">$result</span>&quot;</span>)<br>        continuation.resumeWith(result)<br>        println(<span class="hljs-string">&quot;after resumeWith.&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">suspend</span> &#123;<br>        suspendFunc02(<span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;Kotlin&quot;</span>)<br>        suspendFunc02(<span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;Coroutine&quot;</span>)<br>    &#125;.startCoroutine(<span class="hljs-keyword">object</span> : Continuation&lt;<span class="hljs-built_in">Int</span>&gt; &#123;<br>        <span class="hljs-comment">// 将拦截器赋值给context</span><br>        <span class="hljs-keyword">override</span> <span class="hljs-keyword">val</span> context = LogInterceptor()<br><br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">resumeWith</span><span class="hljs-params">(result: <span class="hljs-type">Result</span>&lt;<span class="hljs-type">Int</span>&gt;)</span></span> &#123;<br>            result.getOrThrow()<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>blog_test</title>
    <link href="/2022/09/21/blog-test/"/>
    <url>/2022/09/21/blog-test/</url>
    
    <content type="html"><![CDATA[<h2 id="测试一"><a href="#测试一" class="headerlink" title="测试一"></a>测试一</h2><p>这是测试一</p><h2 id="测试二"><a href="#测试二" class="headerlink" title="测试二"></a>测试二</h2><p>这是测试二</p>]]></content>
    
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/21/hello-world/"/>
    <url>/2022/09/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
